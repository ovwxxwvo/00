# RANGER config, rifle
# This is the config file of "rifle", ranger's file executor/opener.
  # Each line consists of conditions and a command.
  # For each line the conditions are checked and if they are met,
  # the respective command is run.
  #
  # vim: ft=cfg
  #
  # Syntax:
  #   <condition1> , <condition2> , ... = command
  #
  # The command can contain these environment variables:
  #   $1-$9 | The n-th selected file
  #   $@    | All selected files
  #
  # If you use the special command "ask",
  # rifle will ask you what program to run.
  #
  # Prefixing a condition with "!" will negate its result.
  # These conditions are currently supported:
  #   match <regexp> | The regexp matches $1
  #   ext   <regexp> | The regexp matches the extension of $1
  #   mime  <regexp> | The regexp matches the mime type of $1
  #   name  <regexp> | The regexp matches the basename of $1
  #   path  <regexp> | The regexp matches the absolute path of $1
  #   has  <program> | The program is installed (i.e. located in $PATH)
  #   env <variable> | The environment variable "variable" is non-empty
  #   file           | $1 is a file
  #   directory      | $1 is a directory
  #   number <n>     | change the number of this command to n
  #   terminal       | stdin, stderr and stdout connected to a terminal
  #   X | A graphical environment is available (darwin, Xorg, or Wayland)
  #
  # There are also pseudo-conditions which have a "side effect":
  #   flag <flags>  | Change how the program is run. See below.
  #   label <label> | Assign a label or name to the command
  #                 | so it started with :open_with <label> in ranger
  #                 | or `rifle -p <label>` in the standalone executable.
  #   else          | Always true.
  #
  # Flags are single characters which slightly transform the command:
  #   f | Fork the program, make it run in the background.
  #     |   New command = setsid $command >& /dev/null &
  #   r | Execute the command with root permissions
  #     |   New command = sudo $command
  #   t | Run the program in a new terminal.  If $TERMCMD is not defined,
  #     | rifle will attempt to extract it from $TERM.
  #     |   New command = $TERMCMD -e $command
  # Note: The "New command" serves only as an illustration,
  # the exact implementation may differ.
  # Note: When using rifle in ranger, there is an additional flag "c" for
  # only running the current file even if you have marked multiple files.


# script
#-------------------------------------------
  ext sh|py|lua|js|json  = nvim   -- "$1"
  # ext x?sh?|x?py, has nvim, X, flag f = nvim -- "$1"
  #
  ext sh  = bash   -- "$1"
  ext py  = python -- "$1"

# project
#-------------------------------------------
  ext xcf = gimp   -- "$1"

# archive
#-------------------------------------------
  # avoid password prompt by providing empty password
  # This requires atool
  ext 7z|ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,  has atool = atool --extract --each -- "$@"
  ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = atool --extract --each -- "$@"
  ext    ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz,  has atool = atool --list --each -- "$@" | "$PAGER"
  ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = atool --list --each -- "$@" | "$PAGER"

# media
#-------------------------------------------
  mime ^image, has feh, X, flag f = feh --scale "$@"
  mime ^audio, has mpv, X, flag f = mpv -- "$@"
  mime ^video, has mpv, X, flag f = mpv -- "$@"
  #
  mime ^audio, terminal, has mpv  = mpv -- "$@"
  mime ^video, terminal, has mpv  = mpv -- "$@"

# document
#-------------------------------------------
  ext x?html?, has firefox, X, flag f = firefox -- "$@"
  #
  ext pdf?,      has wpspdf, X, flag f = wpspdf -- "$@"
  ext doc|docx?, has wpsw,   X, flag f = wpsw "$@"
  ext xls|xlsx?, has wpss,   X, flag f = wpss "$@"
  ext ppt|pptx?, has wpsp,   X, flag f = wpsp "$@"
  #
  mime  ^text, label editor = nvim    -- "$@"
  mime  ^text, label pager  = firefox -- "$@"

# other
#-------------------------------------------
  ext gt|gpx|gp5?, has tuxguitar, X, flag f = tuxguitar "$@"

# term
#-------------------------------------------
  mime ^ranger/x-terminal-emulator, has alacritty = alacritty -e "$@"


######################################################################

# Execute a file as program/script.
  mime application/x-executable = "$1"

# Move the file to trash using trash-cli.
  # label trash, has trash-put = trash-put -- "$@"
  # label trash = mkdir -p -- ${XDG_DATA_DIR:-$HOME/.ranger}/ranger-trash; mv -- "$@" ${XDG_DATA_DIR:-$HOME/.ranger}/ranger-trash


