# YAZI config, blazing fast terminal file manager.
# Maintainer:  Jessee Chan <CYPHER0@foxmail.com>
# Last Change: 2024.10.28
  # A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
  # If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.


"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
  ratio          = [ 3, 7, 10 ]
  scrolloff      = 5
  linemode       = "none"
  sort_by        = "extension"
  sort_sensitive = false
  sort_reverse 	 = false
  sort_translit  = false
  sort_dir_first = true
  show_symlink   = false
  show_hidden    = false
  mouse_events   = [ "click", "scroll" ]
  title_format   = "Yazi: {cwd}"
  # sort_by        = "alphabetical"

[input]
  cursor_blink  = false

  # cd
  cd_title      = "Change directory:"
  cd_origin     = "top-center"
  cd_offset     = [ 0, 2, 50, 3 ]

  # create
  # create_title = ["Create:", "Create (dir):"]
  create_title  = "Create:"
  create_origin = "top-center"
  create_offset = [ 0, 2, 50, 3 ]

  # filter
  filter_title  = "Filter:"
  filter_origin = "top-center"
  filter_offset = [ 0, 2, 50, 3 ]

  # find
  find_title    = [ "Find next:", "Find previous:" ]
  find_origin   = "top-center"
  find_offset   = [ 0, 2, 50, 3 ]

  # search
  search_title  = "Search via {n}:"
  search_origin = "top-center"
  search_offset = [ 0, 2, 50, 3 ]

  # shell
  shell_title   = [ "Shell:", "Shell (block):" ]
  shell_origin  = "top-center"
  shell_offset  = [ 0, 2, 50, 3 ]

  # rename
  rename_title  = "Rename:"
  rename_origin = "hovered"
  rename_offset = [ 0, 1, 50, 3 ]

[select]
  open_title    = "Open with:"
  open_origin   = "hovered"
  open_offset   = [ 0, 1, 50, 7 ]

[confirm]
  # trash
  trash_title 	    = "Trash {n} selected file{s}?"
  trash_origin	    = "center"
  trash_offset	    = [ 0, 0, 70, 20 ]

  # delete
  delete_title 	    = "Permanently delete {n} selected file{s}?"
  delete_origin	    = "center"
  delete_offset	    = [ 0, 0, 70, 20 ]

  # overwrite
  overwrite_title   = "Overwrite file?"
  overwrite_content = "Will overwrite the following file:"
  overwrite_origin  = "center"
  overwrite_offset  = [ 0, 0, 50, 15 ]

  # quit
  quit_title        = "Quit?"
  quit_content      = "The following task is still running, are you sure you want to quit?"
  quit_origin       = "center"
  quit_offset       = [ 0, 0, 50, 15 ]

[which]
  sort_by      	 = "none"
  sort_sensitive = false
  sort_reverse 	 = false
  sort_translit  = false

[tasks]
  micro_workers    = 10
  macro_workers    = 20
  bizarre_retry    = 5
  image_alloc      = 536870912  # 512MB
  image_bound      = [ 0, 0 ]
  suppress_preload = false

[preview]
  wrap            = "no"
  tab_size        = 2
  max_width       = 600
  max_height      = 900
  cache_dir       = ""
  image_delay     = 10
  # image_filter    = "nearest"
  image_filter    = "triangle"
  image_quality   = 50
  sixel_fraction  = 20
  ueberzug_scale  = 1
  ueberzug_offset = [ 0, 0, 0, 0 ]
  # image_filter    = "triangle"

[opener]

  edit = [
  	{ run = 'nvim "$@"', desc = "nvim", block  = true, for = "unix" },
    ]

  play = [
  	{ run = 'mpv "$@"',  desc = "mpv",  orphan = true, for = "unix" },
    ]

  extract = [
  	{ run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
    ]

  open = [
  	{ run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
  	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
  	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
    ]

  reveal = [
  	# { run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
  	# { run = 'open -R "$1"',                         desc = "Reveal", for = "macos" },
  	# { run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
  	{ run = '''exiftool "$1"; echo "Press enter to exit";  read _''', block = true, desc = "Show EXIF",       for = "unix" },
  	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
    ]

[open]

  rules = [

  # office
  { name = "*.pdf",  use = "edit" },
  { name = "*.doc",  use = "edit" },
  { name = "*.docx", use = "edit" },
  { name = "*.xls",  use = "edit" },
  { name = "*.xlsx", use = "edit" },
  { name = "*.ppt",  use = "edit" },
  { name = "*.pptx", use = "edit" },

	# { name = "*/", use = [ "open", "reveal" ] },
	{ mime = "text/*",  use = [ "edit", "reveal" ] },
	{ mime = "image/*", use = [ "play", "reveal" ] },
	{ mime = "audio/*", use = [ "play", "reveal" ] },
	{ mime = "video/*", use = [ "play", "reveal" ] },

	# Archive
	{ mime = "application/{,g}zip",                            use = [ "extract", "reveal" ] },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", use = [ "extract", "reveal" ] },

	# Empty file
	# { mime = "inode/x-empty", use = [ "edit", "reveal" ] },
	# Fallback
	{ name = "*", use = [ "edit", "reveal" ] },

  ]

[plugin]

fetchers = [
	# Mimetype
  	{ id = "mime", name = "*",  run = "mime", if = "!mime", prio = "high" },
  # git
    { id = "git",  name = "*",  run = "git" },
    { id = "git",  name = "*/", run = "git" },
    ]

preloaders = [
  	# # Image
  	# { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
  	# { mime = "image/*", run = "image" },
  	# # Video
  	# { mime = "video/*", run = "video" },
  	# # PDF
  	# { mime = "application/pdf", run = "pdf" },
  	# # Font
  	# { mime = "font/*", run = "font" },
  	# { mime = "application/vnd.ms-opentype", run = "font" },
    ]

previewers = [

  # image
  	{ name = "*.jpg",  run = "mpviewer" },
  	{ name = "*.png",  run = "mpviewer" },
  	{ name = "*.gif",  run = "mpviewer" },
  	{ name = "*.bmp",  run = "mpviewer" },
  	{ name = "*.tif",  run = "mpviewer" },
  	{ name = "*.tiff", run = "mpviewer" },

  # audio
  	{ name = "*.mp3",  run = "mpviewer" },
  	{ name = "*.m4a",  run = "mpviewer" },
  	{ name = "*.aac",  run = "mpviewer" },
  	{ name = "*.ogg",  run = "mpviewer" },
  	{ name = "*.wav",  run = "mpviewer" },
  	{ name = "*.flac", run = "mpviewer" },

  # video
  	{ name = "*.mp4",  run = "mpviewer" },
  	{ name = "*.m4v",  run = "mpviewer" },
  	{ name = "*.mkv",  run = "mpviewer" },
  	{ name = "*.flv",  run = "mpviewer" },
  	{ name = "*.avi",  run = "mpviewer" },
  	{ name = "*.webm", run = "mpviewer" },

  # #
  	{ name = "*/", run = "folder", sync = true },
  	# Code
  	{ mime = "text/*", run = "code" },
  	{ mime = "*/{xml,javascript,x-wine-extension-ini}", run = "code" },
  	# Archive
  	{ mime = "application/{,g}zip", run = "archive" },
  	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar,iso9660-image}", run = "archive" },
  	# Fallback
  	{ name = "*", run = "file" },


    ]
  	# Empty file
  	# { mime = "inode/x-empty", run = "empty" },
  	# # JSON
  	# { mime = "application/{json,x-ndjson}", run = "json" },
  	# # PDF
  	# { mime = "application/pdf", run = "pdf" },
  	# # Image
  	# { mime = "image/*", run = "image" },
  	# { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
  	# # Video
  	# { mime = "video/*", run = "video" },
  	# # Font
  	# { mime = "font/*", run = "font" },
  	# { mime = "application/vnd.ms-opentype", run = "font" },


