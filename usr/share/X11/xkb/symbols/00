// KEYSYMS config,


default partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {

  name[Group1]= "Chinese (OO)";

  key  <ESC> {[  Escape     ]};
  key  <TAB> {[  Tab        ]};
  key <CAPS> {[  Caps_Lock  ]};
  key <BKSP> {[  BackSpace  ]};
  key <RTRN> {[  Return     ]};
  key <SPCE> {[  space      ]};

  key <TLDE>	{[  grave,       asciitilde	 ]};
  key <AE01>	{[	1,           exclam	  	 ]};
  key <AE02>	{[	2,           at	         ]};
  key <AE03>	{[	3,           numbersign	 ]};
  key <AE04>	{[	4,           dollar	     ]};
  key <AE05>	{[	5,           percent     ]};
  key <AE06>	{[	6,           asciicircum ]};
  key <AE07>	{[	7,           ampersand	 ]};
  key <AE08>	{[	8,           asterisk  	 ]};
  key <AE09>	{[	9,           parenleft	 ]};
  key <AE10>	{[	0,           parenright	 ]};
  key <AE11>	{[ minus,	       underscore	 ]};
  key <AE12>	{[ equal,	       plus   		 ]};

  key <AD01>	{[	q,	         Q		       ]};
  key <AD02>	{[	w,	         W		       ]};
  key <AD03>	{[	e,	         E		       ]};
  key <AD04>	{[	r,	         R		       ]};
  key <AD05>	{[	t,	         T		       ]};
  key <AD06>	{[	y,	         Y		       ]};
  key <AD07>	{[	u,	         U		       ]};
  key <AD08>	{[	i,	         I		       ]};
  key <AD09>	{[	o,	         O		       ]};
  key <AD10>	{[	p,	         P		       ]};
  key <AD11>	{[ bracketleft,	 braceleft	 ]};
  key <AD12>	{[ bracketright, braceright	 ]};
  key <BKSL>	{[ backslash,	   bar    	   ]};

  key <AC01>	{[	a,	         A		       ]};
  key <AC02>	{[	s,	         S		       ]};
  key <AC03>	{[	d,	         D		       ]};
  key <AC04>	{[	f,	         F		       ]};
  key <AC05>	{[	g,	         G		       ]};
  key <AC06>	{[	h,	         H		       ]};
  key <AC07>	{[	j,	         J		       ]};
  key <AC08>	{[	k,	         K		       ]};
  key <AC09>	{[	l,	         L		       ]};
  key <AC10>	{[ semicolon,	   colon		   ]};
  key <AC11>	{[ apostrophe,   quotedbl	   ]};

  key <AB01>	{[	z,	         Z		       ]};
  key <AB02>	{[	x,	         X		       ]};
  key <AB03>	{[	c,	         C		       ]};
  key <AB04>	{[	v,	         V		       ]};
  key <AB05>	{[	b,	         B		       ]};
  key <AB06>	{[	n,	         N		       ]};
  key <AB07>	{[	m,	         M		       ]};
  key <AB08>	{[ comma,	       less	       ]};
  key <AB09>	{[ period,       greater   	 ]};
  key <AB10>	{[ slash,	       question 	 ]};

  };


partial alphanumeric_keys modifier_keys
xkb_symbols "oo" {

  name[Group1]= "Chinese (OO, oo)";
  include "00(basic)"

  // key <RCTL> {[  ISO_Level3_Shift  ]};
  // modifier_map Control { ISO_Level3_Shift };

  };


partial alphanumeric_keys modifier_keys
xkb_symbols "symbolic" {

  name[Group1]= "Chinese (OO, symbolic)";

  key <TLDE> { [ grave, asciitilde,  backslash,     bar            ] }; // ` ~ \ |
  key <AE01> { [ 1,     exclam,      onesuperior,   notsign        ] }; // 1 ! ¹ ¬
  key <AE02> { [ 2,     at,          twosuperior,   therefore      ] }; // 2 @ ² ∴
  key <AE03> { [ 3,     numbersign,  threesuperior, sterling       ] }; // 3 # ³ £
  key <AE04> { [ 4,     dollar,      foursuperior,  EuroSign       ] }; // 4 $ ⁴ €
  key <AE05> { [ 5,     percent,     fivesuperior,  U2030          ] }; // 5 % ⁵ ‰
  key <AE06> { [ 6,     asciicircum, sixsuperior,   squareroot     ] }; // 6 ^ ⁶ √
  key <AE07> { [ 7,     ampersand,   sevensuperior, section        ] }; // 7 & ⁷ §
  key <AE08> { [ 8,     asterisk,    eightsuperior, infinity       ] }; // 8 * ⁸ ∞
  key <AE09> { [ 9,     parenleft,   ninesuperior,  periodcentered ] }; // 9 ( ⁹ ·
  key <AE10> { [ 0,     parenright,  zerosuperior,  degree         ] }; // 0 ) ⁰ °
  key <AE11> { [ minus, underscore,  notequal,      plusminus      ] }; // - _ ≠ ±
  key <AE12> { [ equal, plus,        multiply,      division       ] }; // = + × ÷

  key <AD01> { [ q,            Q,          U2200,         U2203         ] }; // q Q ∀ ∃
  key <AD02> { [ w,            W,          elementof,     notelementof  ] }; // w W ∈ ∉
  key <AD03> { [ e,            E,          Greek_epsilon, Greek_EPSILON ] }; // e E ε Ε
  key <AD04> { [ r,            R,          Greek_rho,     Greek_RHO     ] }; // p P ρ Ρ
  key <AD05> { [ t,            T,          Greek_tau,     Greek_TAU     ] }; // t T τ Τ
  key <AD06> { [ y,            Y,          Greek_upsilon, Greek_UPSILON ] }; // y Y υ Υ
  key <AD07> { [ u,            U,          Greek_theta,   Greek_THETA   ] }; // u U θ Θ
  key <AD08> { [ i,            I,          Greek_iota,    Greek_IOTA    ] }; // i I ι Ι
  key <AD09> { [ o,            O,          Greek_omicron, Greek_OMICRON ] }; // o O ο Ο
  key <AD10> { [ p,            P,          Greek_pi,      Greek_PI      ] }; // p P π Π
  key <AD11> { [ bracketleft,  braceleft,  union,         intersection  ] }; // [ { ∪ ∩
  key <AD12> { [ bracketright, braceright, includedin,    includes      ] }; // ] } ⊂ ⊃

  key <AC01> { [ a,          A,        Greek_alpha, Greek_ALPHA ] }; // a A α Α
  key <AC02> { [ s,          S,        Greek_sigma, Greek_SIGMA ] }; // s S σ Σ
  key <AC03> { [ d,          D,        Greek_delta, Greek_DELTA ] }; // d D δ Δ
  key <AC04> { [ f,          F,        Greek_phi,   Greek_PHI   ] }; // f F φ Φ
  key <AC05> { [ g,          G,        Greek_gamma, Greek_GAMMA ] }; // g G γ Γ
  key <AC06> { [ h,          H,        Greek_eta,   Greek_ETA   ] }; // h H η Η
  key <AC07> { [ j,          J,        Greek_xi,    Greek_XI    ] }; // j J ξ Ξ
  key <AC08> { [ k,          K,        Greek_kappa, Greek_KAPPA ] }; // k K κ Κ
  key <AC09> { [ l,          L,        Greek_lamda, Greek_LAMDA ] }; // l L λ Λ
  key <AC10> { [ semicolon,  colon,    downarrow,   uparrow     ] }; // ; : ↓ ↑
  key <AC11> { [ apostrophe, quotedbl, rightarrow,  leftarrow   ] }; // ' " → ←

  key <AB01> { [ z,      Z,        Greek_zeta,       Greek_ZETA     ] }; // z Z ζ Ζ
  key <AB02> { [ x,      X,        Greek_chi,        Greek_CHI      ] }; // x X χ Χ
  key <AB03> { [ c,      C,        Greek_psi,        Greek_PSI      ] }; // c C ψ Ψ
  key <AB04> { [ v,      V,        Greek_omega,      Greek_OMEGA    ] }; // v V ω Ω
  key <AB05> { [ b,      B,        Greek_beta,       Greek_BETA     ] }; // b B β Β
  key <AB06> { [ n,      N,        Greek_nu,         Greek_NU       ] }; // n N ν Ν
  key <AB07> { [ m,      M,        Greek_mu,         Greek_MU       ] }; // m M μ Μ
  key <AB08> { [ comma,  less,     lessthanequal,    guillemotleft  ] }; // , < ≤ «
  key <AB09> { [ period, greater,  greaterthanequal, guillemotright ] }; // . > ≥ »
  key <AB10> { [ slash,  question, U203D,            U2766          ] }; // / ? ‽ ❦

  key <BKSL> { [ backslash, bar,   grave, asciitilde ] }; // \ | ` ~
  key <LSGT> { [ U230A,     U230B, U2308, U2309      ] }; // ⌊ ⌋ ⌈ ⌉

  include "level3(ralt_switch)"

  };


